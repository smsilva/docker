name: ci-example-build-and-push

on:
  push:
    branches:
      - main

    paths:
      - "ci-example/**"
      - ".github/workflows/**"
      - '!**/README.md'
      - '!**/CHANGELOG.md'

jobs:
  build-and-push:
    if: "!startsWith(github.event.head_commit.message, 'bump')"
    runs-on: ubuntu-latest
    environment: 
      name: continuos-integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short SHA
        id: vars
        run: |
          SHORT_COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-7)
          echo "SHORT_COMMIT_HASH=${SHORT_COMMIT_HASH}" >> $GITHUB_ENV

          echo "GITHUB_REPOSITORY.: ${GITHUB_REPOSITORY}"
          echo "GITHUB_SHA........: ${GITHUB_SHA}"
          echo "SHORT_COMMIT_HASH.: ${SHORT_COMMIT_HASH}"

      - name: Build Docker image
        run: |
          DOCKER_IMAGE_NAME=ghcr.io/${{ github.repository }}:${SHORT_COMMIT_HASH}

          echo "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}" >> $GITHUB_ENV

          echo "GITHUB_REPOSITORY.: ${GITHUB_REPOSITORY}"
          echo "GITHUB_SHA........: ${GITHUB_SHA}"
          echo "SHORT_COMMIT_HASH.: ${SHORT_COMMIT_HASH}"
          echo "DOCKER_IMAGE_NAME.: ${DOCKER_IMAGE_NAME}"

          docker build -t ${DOCKER_IMAGE_NAME} ./ci-example

      - name: Push Docker image
        run: |
          echo "GITHUB_REPOSITORY.: ${GITHUB_REPOSITORY}"
          echo "GITHUB_SHA........: ${GITHUB_SHA}"
          echo "SHORT_COMMIT_HASH.: ${SHORT_COMMIT_HASH}"
          echo "DOCKER_IMAGE_NAME.: ${DOCKER_IMAGE_NAME}"

          docker push ${DOCKER_IMAGE_NAME}

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.SMSILVA_GITHUB_ACTION_ID }}
          private-key: ${{ secrets.SMSILVA_GITHUB_ACTION_CLIENT_PRIVATE_KEY }}

      - name: Use the token
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api octocat

      - name: Bump version
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          SMSILVA_GITHUB_ACTION_ID: ${{ vars.SMSILVA_GITHUB_ACTION_ID }}
        run: |
          echo "SMSILVA_GITHUB_ACTION_ID.: ${SMSILVA_GITHUB_ACTION_ID}"
          echo "GITHUB_REPOSITORY........: ${GITHUB_REPOSITORY}"
          echo "GITHUB_SHA...............: ${GITHUB_SHA}"
          echo "SHORT_COMMIT_HASH........: ${SHORT_COMMIT_HASH}"
          echo "DOCKER_IMAGE_NAME........: ${DOCKER_IMAGE_NAME}"

          echo "::group::Setting up git user"
          git config --global user.name github-actions[bot]
          git config --global user.email ${{ vars.SMSILVA_GITHUB_ACTION_ID }}+github-actions[bot]@users.noreply.github.com

          if [ -f ~/.gitconfig ]; then
            echo "Found ~/.gitconfig"
            cat ~/.gitconfig
          else
            echo "No ~/.gitconfig found"
          fi
          echo "::endgroup::"

          echo "::group::Pulling commitizen/commitizen:latest..."
          docker pull commitizen/commitizen:latest --quiet
          echo "::endgroup::"

          echo "Trying to bump version..."
          docker run --rm \
            --env GITHUB_TOKEN="${GH_TOKEN?}" \
            --env GH_TOKEN="${GH_TOKEN?}" \
            --volume $PWD:/app \
            --volume ~/.gitconfig:/etc/gitconfig \
            --user $(id -u) \
            commitizen/commitizen:latest \
              bump \
                --changelog \
                --annotated-tag-message "original-commit-sha: ${SHORT_COMMIT_HASH?}"

          echo "Pushing changes..."
          git push
          git push --tags

          # Get the bumped version
          BUMPED_VERSION=$(grep version: .cz.yaml | awk '{ print $2 }')

          # Log the bumped version
          echo "BUMPED_VERSION...........: ${BUMPED_VERSION}"

          echo "Triggering ci-release-by-tag workflow..."
          gh workflow run ci-example-release-by-tag --field tag=${BUMPED_VERSION?} 
